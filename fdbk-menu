#!/usr/bin/env -S gjs -m
//#!/usr/bin/env -S LD_PRELOAD=/usr/lib/libgtk4-layer-shell.so gjs -m
//import Gettext,{gettext as _} from 'gettext';
import GObject from 'gi://GObject';
import Gio from 'gi://Gio';
import GLib from 'gi://GLib';
import Gtk from 'gi://Gtk?version=4.0';
import Gdk from 'gi://Gdk?version=4.0';
//import LayerShell from 'gi://Gtk4LayerShell';
//Gettext.textdomain('gtk40');


/*

{
	icon?:Gtk.Icon,
	txt:String,
	exec:Function(Gtk.Window),
	menu?:[
		{
			txt:String,
			exec:Function(Gtk.Window)
		},
		...
	],
	keywords:{
		[weight<Number>]:[
			keyword<String>
		],
		...
	}
}


	*/

const
drun=({
	default_icon:ico=Gio.Icon.new_for_string('application-x-executable')
}={})=>Gio.AppInfo.get_all().filter(x=>x.should_show()).map(x=>(
	x=Gio.DesktopAppInfo.new(x.get_id()),
	{
		icon:x.get_icon()??ico,
		txt:x.get_display_name(),
		exec:w=>{
			try{x.launch([],new Gio.AppLaunchContext());}
			catch(e){new Gtk.AlertDialog({message:e.message}).show(w);return 1;}
		},
		menu:x.list_actions().map(y=>({
			txt:x.get_action_name(y),
			exec:_=>x.launch_action(y,new Gio.AppLaunchContext())
		})),
		keywords:{
			16:[
				x.get_display_name(),
				x.get_generic_name()
			],
			8:[x.get_executable().split('/').at(-1)],
			1:[
				x.get_description(),
				...(x.get_categories()??'').split(';'),
				...x.get_keywords()??[]
			]
		}
	}
)),
bench=(n=1000)=>(
	n=[...Array(n)].map(_=>(_=Math.random()+'',{txt:_,keywords:{1:[_]}})),
	console.log('rand done'),
	n
),


main=({
	title='fdbk-menu',
	defaultWidth=480,defaultHeight=480,
	items=_=>[]
}={})=>((
	app=new Gtk.Application({application_id:'dev.mcbeeringi.fudebako',flags:Gio.ApplicationFlags.NON_UNIQUE})
)=>(
	app.connect('activate',_=>(
		((
			box=new Gtk.Box({orientation:Gtk.Orientation.VERTICAL}),
			hbar=new Gtk.HeaderBar,
			win=new Gtk.ApplicationWindow({
						application:app,child:box,
				title,
				titlebar:hbar,
				//decorated:false,
				defaultWidth,defaultHeight
			}),
			sinp=new Gtk.SearchEntry({search_delay:50,hexpand:true}),
			sbtn=new Gtk.ToggleButton({icon_name:'system-search-symbolic'}),
			sbar=new Gtk.SearchBar({key_capture_widget:win,child:sinp}),
			ul=new Gtk.FlowBox({
				max_children_per_line:1,
				homogeneous:true,
				selection_mode:Gtk.SelectionMode.BROWSE,
				valign:Gtk.Align.START,
			}),
			scr=new Gtk.ScrolledWindow({vexpand:true,child:ul}),
			esc=_=>(key=>(
				key.connect('key-pressed',(_,k)=>k==Gdk.KEY_Escape&&win.close()),
				key
			))(new Gtk.EventControllerKey),
		)=>(
			//LayerShell.init_for_window(win),
			//LayerShell.set_layer(win,LayerShell.Layer.TOP),
			//LayerShell.set_keyboard_mode(win,LayerShell.KeyboardMode.EXCLUSIVE),
			ul.set_filter_func((w,s=sinp.text.toLowerCase(),ss=new RegExp(`\\s${s}`))=>(
				w.p=s?Object.entries(w.x.keywords).reduce((a,[i,x])=>(
					x.reduce((a,x)=>x?(
						x=x.toLowerCase(),
						a||x.includes(s)&&a++,// base point to display
						a&&a+i*(+x.startsWith(s)||.5*ss.test(x))/(Math.abs(s.length-x.length)+1)// match point
					):a,a)
				),0):Infinity,
				w.opacity=w.p/3,
				w.child.get_last_child().set_label(w.p.toFixed(1)),
				w.p
			)),
			ul.set_sort_func((a,b)=>Math.sign(b.p-a.p)),
			sinp.connect('search-changed',_=>(
				ul.invalidate_filter(),
				ul.invalidate_sort(),
				ul.select_child(ul.get_child_at_index(0)),
				//console.log(ul.get_selected_children()),
				0
			)),
			items.forEach(x=>ul.append(((
				box=new Gtk.Box,
				li=new Gtk.FlowBoxChild({child:box})
			)=>(
				x.icon&&(x=>(
					x=Gtk.Image.new_from_gicon(x),
					x.icon_size=Gtk.IconSize.LARGE,
					box.append(x)
				))(x.icon),
				box.append(new Gtk.Label({label:x.txt})),
				box.append(new Gtk.Label({hexpand:true,xalign:1})),
				x.menu&&(li.tooltip_text=x.menu.map(x=>x.txt).join('\n')),
				li.x=x,
				li.connect('activate',_=>li.p&&(x.exec(win)||win.close())),
				li
			))())),
			sinp.connect('activate',w=>(w=ul.get_selected_children()[0])&&w.p&&(w.x.exec(win)||win.close())),
			sinp.add_controller(esc()),
			sbtn.bind_property('active',sbar,'search-mode-enabled',GObject.BindingFlags.BIDIRECTIONAL),

			hbar.pack_start(sbtn),

			box.append(sbar),
			box.append(scr),

			win.add_controller(esc()),
			win.present(),
			0
		))()
	)),
	app.run([])
))();

//console.log(drun());
//main({title:'launch...',items:bench()});
main({title:'launch...',items:drun()});
